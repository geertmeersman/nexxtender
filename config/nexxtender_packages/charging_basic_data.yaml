substitutions:
  ble_uuid_charging_basic_characteristic: ${ble_uuid_prefix}cf
  charging_basic_prefix: Charging
  charging_basic_id_prefix: charging_basic
  charging_basic_update_interval: 60s
  http_base_url: "\"\""
  http_post_enabled: "false"
  http_x_api_key: "\"\""

globals:
  - id: g_${charging_basic_id_prefix}_seconds
    type: uint16_t
  - id: g_${charging_basic_id_prefix}_energy
    type: uint32_t
  - id: g_${charging_basic_id_prefix}_phase_count
    type: int
  - id: g_${charging_basic_id_prefix}_discriminator
    type: std::string
  - id: g_${charging_basic_id_prefix}_status
    type: std::string
  - id: g_${charging_basic_id_prefix}_status_id
    type: int
  - id: g_http_post_enabled
    type: bool
    restore_value: no
    initial_value: ${http_post_enabled}
  - id: g_http_base_url
    type: std::string
    restore_value: no
    initial_value: "${http_base_url}"
  - id: g_http_x_api_key
    type: std::string
    restore_value: no
    initial_value: "${http_x_api_key}"

sensor:
  - platform: template
    name: "${charging_basic_prefix} Seconds"
    id: ${charging_basic_id_prefix}_seconds
    icon: mdi:timelapse
    device_class: duration
    unit_of_measurement: s
    state_class: measurement
    accuracy_decimals: 0
    update_interval: ${charging_basic_update_interval}
    lambda: |-
      return id(g_${charging_basic_id_prefix}_seconds);
  - platform: template
    name: "Energy"
    id: ${charging_basic_id_prefix}_energy
    icon: mdi:flash
    device_class: energy
    unit_of_measurement: kWh
    state_class: total_increasing
    accuracy_decimals: 2
    filters:
      - lambda: return x / 1000;
    update_interval: ${charging_basic_update_interval}
    lambda: |-
      return id(g_${charging_basic_id_prefix}_energy);
  - platform: template
    name: "Charging Phase Count"
    id: ${charging_basic_id_prefix}_phase_count
    icon: mdi:counter
    state_class: measurement
    accuracy_decimals: 0
    update_interval: ${charging_basic_update_interval}
    lambda: |-
      return id(g_${charging_basic_id_prefix}_phase_count);

http_request:
  useragent: esphome/${device_name}
  timeout: 10s

script:
  - id: send_charger_event
    parameters:
      status_str: string
    then:
      - http_request.post:
          url: !lambda 'return (id(g_http_base_url) + "/charger/event").c_str();'
          request_headers:
            Content-Type: application/json
            x-api-key: !lambda 'return id(g_http_x_api_key).c_str();'
          body: !lambda |-
            return "{\"event_type\": \"" + status_str + "\", \"charger_id\": \"${friendly_name}\"}";
  - id: send_charging_status
    parameters:
      seconds_val: int
      energy_val: float
      status_str: string
      phase_count_val: int
    then:
      - http_request.post:
          url: !lambda 'return (id(g_http_base_url) + "/charger/status").c_str();'
          request_headers:
            Content-Type: application/json
            x-api-key: !lambda 'return id(g_http_x_api_key).c_str();'
          body: !lambda |-
            return "{"
              "\"charger_id\": \"${friendly_name}\","
              "\"seconds\": " + to_string(seconds_val) + ","
              "\"energy\": " + to_string(energy_val) + ","
              "\"status\": \"" + status_str + "\","
              "\"phase_count\": " + to_string(phase_count_val) +
            "}";
  - id: send_charging_session
    parameters:
      seconds_val: int
      energy_val: float
    then:
      - http_request.post:
          url: !lambda 'return (id(g_http_base_url) + "/charger/session/minimal").c_str();'
          request_headers:
            Content-Type: application/json
            x-api-key: !lambda 'return id(g_http_x_api_key).c_str();'
          body: !lambda |-
            return "{"
              "\"charger_id\": \"${friendly_name}\","
              "\"seconds\": " + to_string(seconds_val) + ","
              "\"energy\": " + to_string(energy_val)
            "}";

text_sensor:
  - platform: template
    name: "Discriminator"
    id: ${charging_basic_id_prefix}_discriminator
    icon: mdi:battery-charging-100
    update_interval: ${charging_basic_update_interval}
    lambda: |-
      return id(g_${charging_basic_id_prefix}_discriminator);
  - platform: template
    name: "Status"
    id: ${charging_basic_id_prefix}_status
    icon: mdi:ev-station
    update_interval: ${charging_basic_update_interval}
    lambda: |-
      return id(g_${charging_basic_id_prefix}_status);
  - platform: ble_client
    id: ${device_name}_charging_basic_data
    internal: true
    ble_client_id: ${device_name}_ble_client_id
    service_uuid: ${ble_uuid_receive_service}
    characteristic_uuid: ${ble_uuid_charging_basic_characteristic}
    notify: true
    update_interval: never
    on_notify:
      then:
        lambda: |-
          if (x.empty()) { return; }
          logd_x("${device_name}_charging_basic_data", x);

          // Declare static variables for logging control and status change tracking
          static int last_status_id = 0;
          static unsigned long last_log_time = 0;
          unsigned long now = millis();

          // Declare variables outside the switch-case block
          String value_string;
          int value;

          id(g_${charging_basic_id_prefix}_seconds) = getUShort(x, 0);

          // Publish the discriminator state
          switch (getByte(x, 2)) {
              case 1:
                  value_string = "Started";
                  break;
              case 2:
                  value_string = "Charging";
                  break;
              case 3:
                  value_string = "Stopped";
                  break;
              default:
                  value_string = "Unknown";
          }
          id(g_${charging_basic_id_prefix}_discriminator) = value_string.c_str();;
          id(${charging_basic_id_prefix}_discriminator).publish_state(value_string.c_str());

          switch (static_cast<char>(getByte(x, 3))) {
              case 'B':
                  value_string = "Plugged";
                  value = 1;
                  break;
              case 'C':
              case 'D':
                  value_string = "Charging";
                  value = 2;
                  break;
              case 'E':
                  value_string = "Fault";
                  value = 3;
                  break;
              default:
                  value_string = "Unplugged";
                  value = 4;
                  break;
          }
          id(g_${charging_basic_id_prefix}_status_id) = value;
          id(g_${charging_basic_id_prefix}_status) = value_string.c_str();
          id(${charging_basic_id_prefix}_status).publish_state(value_string.c_str());

          if (id(g_http_post_enabled) && value_string == "Unplugged" && id(g_${charging_basic_id_prefix}_energy) > 0) {
            ESP_LOGI("http_event", "Unplugged with energy > 0: %d", id(g_${charging_basic_id_prefix}_energy));
            id(send_charger_event).execute("UnpluggedSession");
            id(send_charging_status).execute(
              id(g_${charging_basic_id_prefix}_seconds),
              static_cast<float>(id(g_${charging_basic_id_prefix}_energy)) / 1000.0f
            );
          }

          value = getInt(x, 8);
          id(g_${charging_basic_id_prefix}_energy) = value;

          value = getByte(x, 13);
          id(g_${charging_basic_id_prefix}_phase_count) = value;
          id(${charging_basic_id_prefix}_phase_count).publish_state(value);

          // Only log once every 60 seconds
          if (now - last_log_time >= 60000) {
            last_log_time = now;
            if (id(g_http_post_enabled)) {
              ESP_LOGD("charging_data", "Triggering HTTP POST for charging: seconds: %d, energy: %d, status: %s, phase_count: %d",
                  id(g_${charging_basic_id_prefix}_seconds),
                  id(g_${charging_basic_id_prefix}_energy),
                  id(g_${charging_basic_id_prefix}_status).c_str(),
                  id(g_${charging_basic_id_prefix}_phase_count));

              id(send_charging_status).execute(
                id(g_${charging_basic_id_prefix}_seconds),
                static_cast<float>(id(g_${charging_basic_id_prefix}_energy)) / 1000.0f,
                id(g_${charging_basic_id_prefix}_status).c_str(),
                id(g_${charging_basic_id_prefix}_phase_count)
              );
            }
          }

          // HTTP POST on status change
          if (id(g_http_post_enabled) && id(g_${charging_basic_id_prefix}_status_id) != last_status_id) {
            last_status_id = id(g_${charging_basic_id_prefix}_status_id);
            std::string event = id(g_${charging_basic_id_prefix}_status).c_str();
            ESP_LOGD("http_event", "Triggering HTTP POST for event: %s", event.c_str());
            id(send_charger_event).execute(event);
          }
