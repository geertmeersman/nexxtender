substitutions:
  ble_uuid_generic_data: ${ble_uuid_prefix}df
  ble_uuid_generic_command: ${ble_uuid_prefix}dd
  ble_uuid_generic_status: ${ble_uuid_prefix}de
  generic_data_prefix: Generic Data
  generic_data_id_prefix: generic_data
  generic_data_update_interval: 60s
  slider_max_car_charging_speed: "32"
  slider_max_available_capacity: "40"
  slider_max_peak_consumption_limit: "16"
  min_charging_value: "6"
  slider_max_offloading_minimum: "32"
  slider_min_offloading_minimum: "6"

globals:
  - id: ble_wait_start_time
    type: uint32_t
    restore_value: no
    initial_value: "0"
  - id: g_${generic_data_id_prefix}_config_init
    type: bool
    initial_value: "false"
  - id: g_${generic_data_id_prefix}_time_synced
    type: bool
    initial_value: "false"
  - id: g_${generic_data_id_prefix}_ble_in_use
    type: bool
    initial_value: "false"
  - id: g_${generic_data_id_prefix}_cbor_config_changed
    type: bool
    initial_value: "false"
  - id: g_${generic_data_id_prefix}_status
    type: int
    initial_value: "0"
  - id: g_${generic_data_id_prefix}_time
    type: std::string
  - id: g_${generic_data_id_prefix}_week_start
    type: std::string
  - id: g_${generic_data_id_prefix}_week_end
    type: std::string
  - id: g_${generic_data_id_prefix}_weekend_start
    type: std::string
  - id: g_${generic_data_id_prefix}_weekend_end
    type: std::string
  - id: g_${generic_data_id_prefix}_cbor_config
    type: std::string
    initial_value: ""
  - id: g_${generic_data_id_prefix}_config
    type: std::string
    initial_value: ""
  - id: g_${generic_data_id_prefix}_i_evse_max
    type: float
    initial_value: "0"
  - id: g_${generic_data_id_prefix}_i_min
    type: float
    initial_value: "0"
  - id: g_${generic_data_id_prefix}_peak_consumption_limit_set
    type: bool
    initial_value: "false"
  - id: g_${generic_data_id_prefix}_peak_consumption_limit
    type: float
    initial_value: "0"
  - id: g_${generic_data_id_prefix}_i_max
    type: float
    initial_value: "0"
  - id: g_${generic_data_id_prefix}_charge_mode
    type: int
    initial_value: "6"
sensor:
  - platform: template
    name: "Charging Phases"
    id: ${generic_data_id_prefix}_charging_phases
    icon: mdi:counter
    state_class: measurement
    accuracy_decimals: 0
    update_interval: ${generic_data_update_interval}
  - platform: template
    name: "Maximum available capacity"
    id: ${generic_data_id_prefix}_i_max
    icon: mdi:current-ac
    device_class: current
    unit_of_measurement: A
    state_class: measurement
    accuracy_decimals: 0
    update_interval: ${generic_data_update_interval}
  - platform: template
    name: "Offloading minimum"
    id: ${generic_data_id_prefix}_i_min
    icon: mdi:current-ac
    device_class: current
    unit_of_measurement: A
    state_class: measurement
    accuracy_decimals: 0
    update_interval: ${generic_data_update_interval}
  - platform: template
    name: "Maximum car charging speed"
    id: ${generic_data_id_prefix}_i_evse_max
    icon: mdi:current-ac
    device_class: current
    unit_of_measurement: A
    state_class: measurement
    accuracy_decimals: 0
    update_interval: ${generic_data_update_interval}
  - platform: template
    name: "Minimum car charging speed"
    id: ${generic_data_id_prefix}_i_evse_min
    icon: mdi:current-ac
    device_class: current
    unit_of_measurement: A
    state_class: measurement
    accuracy_decimals: 0
    update_interval: ${generic_data_update_interval}
  - platform: template
    name: "Peak consumption limit"
    id: ${generic_data_id_prefix}_i_capacity
    icon: mdi:current-ac
    device_class: current
    unit_of_measurement: A
    state_class: measurement
    accuracy_decimals: 0
    update_interval: ${generic_data_update_interval}

text_sensor:
  - platform: template
    name: "Mode"
    id: ${generic_data_id_prefix}_charge_mode
    icon: mdi:speedometer
    update_interval: ${generic_data_update_interval}
  - platform: template
    name: "Connection type"
    id: ${generic_data_id_prefix}_connection_type
    icon: mdi:transmission-tower
    update_interval: ${generic_data_update_interval}
  - platform: template
    name: "Week schema"
    id: ${generic_data_id_prefix}_week_schema
    icon: mdi:calendar
    update_interval: ${generic_data_update_interval}
    lambda: |-
      char time_string[20];
      sprintf(time_string, "%s - %s", id(g_${generic_data_id_prefix}_week_start).c_str(), id(g_${generic_data_id_prefix}_week_end).c_str());
      return optional<String>(time_string);
  - platform: template
    name: "Weekend schema"
    id: ${generic_data_id_prefix}_weekend_schema
    icon: mdi:calendar
    update_interval: ${generic_data_update_interval}
    lambda: |-
      char time_string[20];
      sprintf(time_string, "%s - %s", id(g_${generic_data_id_prefix}_weekend_start).c_str(), id(g_${generic_data_id_prefix}_weekend_end).c_str());
      return optional<String>(time_string);
  - platform: template
    name: "Generic Status"
    id: ${device_name}_generic_status
    icon: mdi:information-box
    update_interval: ${generic_data_update_interval}
    entity_category: diagnostic
  - platform: ble_client
    id: ${device_name}_generic_status_internal
    name: Generic Internal Status
    internal: true
    ble_client_id: ${device_name}_ble_client_id
    service_uuid: ${ble_uuid_receive_service}
    characteristic_uuid: ${ble_uuid_generic_status}
    update_interval: never
    notify: true
    on_notify:
      then:
        lambda: |-
          static std::string prev_status; // Persist previous status across calls
          logd_x("${device_name}_${generic_data_id_prefix} status", x);

          std::string reversed_x(x.rbegin(), x.rend());  // Reverse the order of bytes in x
          String hex_status = format_hex_pretty((uint8_t *) reversed_x.c_str(), reversed_x.size());

          // Remove the period from the hexadecimal string
          hex_status.erase(std::remove(hex_status.begin(), hex_status.end(), '.'), hex_status.end());

          if (prev_status.empty()) {
            ESP_LOGD("${device_name}_${generic_data_id_prefix} status", "First status received: %s", hex_status.c_str());
          } else if (hex_status == prev_status && prev_status != "4003") {
            ESP_LOGD("${device_name}_${generic_data_id_prefix} status", "Status unchanged: %s", hex_status.c_str());
            return;
          }
          ESP_LOGD("${device_name}_${generic_data_id_prefix} status", "Status changed: %s -> %s", prev_status.c_str(), hex_status.c_str());
          prev_status = hex_status; // Update stored value

          // Convert hexadecimal string to integer
          int value = std::stoi(hex_status, nullptr, 16);
          id(g_${generic_data_id_prefix}_status) = value;
          ESP_LOGD("${device_name}_generic_data", "Status received: %s (%d)", hex_status.c_str(), id(g_${generic_data_id_prefix}_status));


          // Switch statement to handle different cases
          switch(value) {
            case 0x0001:
                id(${device_name}_generic_status).publish_state(std::string("Unlocked"));
                return;
            case 0x0002:
                id(${device_name}_generic_status).publish_state(std::string("Unlocked force max"));
                return;
            case 0x0003:
                id(${device_name}_generic_status).publish_state(std::string("Unlocked force eco"));
                return;
            case 0x4001:
                id(${device_name}_generic_status).publish_state(std::string("Time Set READY"));
                id(unblock_ble).execute("Time Set READY");
                id(script_write_time).execute();
                return;
            case 0x4002:
                id(${device_name}_generic_status).publish_state(std::string("Time Set SUCCESS"));
                id(unblock_ble).execute("Time Set SUCCESS");
                return;
            case 0x4003:
                id(${device_name}_generic_status).publish_state(std::string("Time read POPPED"));
                id(unblock_ble).execute("Time read POPPED");
                id(script_read_generic_data).execute();
                return;
            case 0x5001:
                id(${device_name}_generic_status).publish_state(std::string("Config Set READY"));
                ESP_LOGD("I_EVSE_MAX", "%f", id(g_${generic_data_id_prefix}_i_evse_max));
                ESP_LOGD("CHARGE_MODE", "%d", id(g_${generic_data_id_prefix}_charge_mode));
                ESP_LOGD("I_MIN", "%d", id(g_${generic_data_id_prefix}_i_min));
                id(script_write_config).execute();
                //id(unblock_ble).execute("Config Set READY");//keep blocked as we need the confirmation
                return;
            case 0x5004:
                id(${device_name}_generic_status).publish_state(std::string("Config Set CBOR READY"));
                id(script_write_cbor_config).execute();
                //id(unblock_ble).execute("Config Set CBOR READY"); //keep blocked as we need the confirmation
                return;
            case 0x5002:
            case 0x5005:
                id(${device_name}_generic_status).publish_state(std::string("Config write SUCCESS"));
                id(unblock_ble).execute("Config write SUCCESS");
                id(script_read_cbor_config).execute();
                return;
            case 0x5003:
            case 0x5006:
                id(${device_name}_generic_status).publish_state(std::string("Config read POPPED"));
                id(unblock_ble).execute("Config read POPPED");
                id(script_read_generic_data).execute();
                id(unblock_ble).execute("Config read POPPED");
                if (id(g_${generic_data_id_prefix}_time_synced) == false) {
                  id(script_sync_time).execute();
                }
                if (id(g_${generic_data_id_prefix}_cbor_config_changed) == true) {
                  ESP_LOGI("${device_name}_generic_data", "Sending config as CBOR config changed");
                  id(script_send_config).execute();
                  id(g_${generic_data_id_prefix}_cbor_config_changed) = false;
                }
                return;
            default:
                id(${device_name}_generic_status).publish_state(std::string("UNKNOWN"));
                //id(script_read_generic_data).execute(); //TODO leave it?
                return;
          }
  - platform: ble_client
    id: ${device_name}_generic_data
    name: Generic data
    internal: true
    ble_client_id: ${device_name}_ble_client_id
    service_uuid: ${ble_uuid_receive_service}
    characteristic_uuid: ${ble_uuid_generic_data}
    entity_category: "config"
    #filters:
    #lambda: |-
    #String hex_data = format_hex_pretty((uint8_t *) x.c_str(), x.size());
    #ESP_LOGD("${device_name}_generic_data", "Status is: %d", id(g_${generic_data_id_prefix}_status));
    #return hex_data;
    notify: true
  - platform: template
    name: "Nexxtender Time"
    id: ${generic_data_id_prefix}_human_time
    icon: "mdi:clock-time-four"
    update_interval: ${generic_data_update_interval}
    entity_category: diagnostic
    lambda: |-
      return id(g_${generic_data_id_prefix}_time);

script:
  - id: delay_5s
    mode: queued
    then:
      - delay: 5s
  - id: wait_for_ble
    mode: queued
    parameters:
      log_message: string
    then:
      - lambda: |-
          if (id(g_${generic_data_id_prefix}_ble_in_use)) { // Only log if BLE is in use
              std::string log_copy = log_message; // Make a local copy
              ESP_LOGI("${device_name}_generic_data", "Waiting BLE for %s", log_copy.c_str());
              id(ble_wait_start_time) = millis(); // Store start time globally
          } else {
              id(ble_wait_start_time) = millis(); // Still initialize start time
          }

      - while:
          condition:
            lambda: |-
              return id(g_${generic_data_id_prefix}_ble_in_use) == true &&
                     (millis() - id(ble_wait_start_time) < 10000); // Timeout after 10s
          then:
            - delay: 500ms

      - lambda: |-
          std::string log_copy = log_message; // Make a local copy
          if (id(g_${generic_data_id_prefix}_ble_in_use)) {
              ESP_LOGW("${device_name}_generic_data", "BLE wait timeout for %s", log_copy.c_str());
          } else {
              id(g_${generic_data_id_prefix}_ble_in_use) = true;
              ESP_LOGI("${device_name}_generic_data", "Blocked BLE for %s", log_copy.c_str());
          }
  - id: unblock_ble
    parameters:
      log_message: string # Define a parameter
    then:
      - lambda: |-
          ESP_LOGI("${device_name}_generic_data", "Unblocking BLE for %s", log_message.c_str());
          id(g_${generic_data_id_prefix}_ble_in_use) = false;
  - id: switch_charger_mode
    then:
      - lambda: |-
          if (id(g_${generic_data_id_prefix}_charge_mode) != 6) {
            auto select_call = id(select_mode).make_call();
            int value = id(g_${generic_data_id_prefix}_charge_mode);
            String value_string;
            switch (value) {
                case 0:
                    value_string = "Eco Open";
                    break;
                case 1:
                    value_string = "Max Open";
                    break;
                case 4:
                    value_string = "Eco Private";
                    break;
                case 5:
                    value_string = "Max Private";
                    break;
                default:
                    value_string = "unknown";
            }
            ESP_LOGD("script.switch_charger_mode", "Switching to status: %s", value_string.c_str());
            select_call.set_option(value_string.c_str());
            select_call.perform();
          }
  - id: script_read_config
    then:
      - lambda: |-
          id(wait_for_ble).execute("script_read_config");  // Wait until ble_in_use is false
      - ble_client.ble_write:
          id: ${device_name}_ble_client_id
          service_uuid: ${ble_uuid_receive_service}
          characteristic_uuid: ${ble_uuid_generic_command}
          value: [0x04, 0x50]
      - lambda: |-
          id(unblock_ble).execute("script_read_config");
      - delay: 5s
      - lambda: |-
          if (id(g_${generic_data_id_prefix}_status) == 0x5006) {
            ESP_LOGD("${device_name}_generic_data", "script_read_config status is OK: 0x%x", id(g_${generic_data_id_prefix}_status));
          } else {
            ESP_LOGD("${device_name}_generic_data", "script_read_config status is NOK, let's read old config!: 0x%x", id(g_${generic_data_id_prefix}_status));
            id(script_read_config_old).execute();
          }
  - id: script_send_config
    then:
      - lambda: |-
          id(wait_for_ble).execute("script_send_config");  // Wait until ble_in_use is false
      - ble_client.ble_write:
          id: ${device_name}_ble_client_id
          service_uuid: ${ble_uuid_receive_service}
          characteristic_uuid: ${ble_uuid_generic_command}
          value: [0x03, 0x50]
  - id: script_send_config_old
    then:
      - lambda: |-
          id(wait_for_ble).execute("script_send_config_old");  // Wait until ble_in_use is false
      - ble_client.ble_write:
          id: ${device_name}_ble_client_id
          service_uuid: ${ble_uuid_receive_service}
          characteristic_uuid: ${ble_uuid_generic_command}
          value: [0x01, 0x50]
  - id: script_read_config_old
    then:
      - lambda: |-
          id(wait_for_ble).execute("script_read_config_old");  // Wait until ble_in_use is false
      - ble_client.ble_write:
          id: ${device_name}_ble_client_id
          service_uuid: ${ble_uuid_receive_service}
          characteristic_uuid: ${ble_uuid_generic_command}
          value: [0x02, 0x50]
  - id: script_read_time
    then:
      #- lambda: |-
      #id(wait_for_ble).execute("script_read_time");  // Wait until ble_in_use is false
      - ble_client.ble_write:
          id: ${device_name}_ble_client_id
          service_uuid: ${ble_uuid_receive_service}
          characteristic_uuid: ${ble_uuid_generic_command}
          value: [0x02, 0x40]
  - id: script_sync_time
    then:
      - lambda: |-
          id(wait_for_ble).execute("script_sync_time");  // Wait until ble_in_use is false
      - ble_client.ble_write:
          id: ${device_name}_ble_client_id
          service_uuid: ${ble_uuid_receive_service}
          characteristic_uuid: ${ble_uuid_generic_command}
          value: [0x01, 0x40]
      - lambda: |-
          id(delay_5s).execute();
          id(unblock_ble).execute("script_sync_time");
          id(script_read_time).execute();

  - id: script_write_time
    then:
      - ble_client.ble_write:
          id: ${device_name}_ble_client_id
          service_uuid: ${ble_uuid_receive_service}
          characteristic_uuid: ${ble_uuid_generic_data}
          value: !lambda |-
            // Get the epoch time integer from ESP32
            std::time_t current_time_epoch = std::time(nullptr);
            int epoch_time_int = static_cast<int>(current_time_epoch);
            // Convert the integer into a byte array
            std::array<uint8_t, sizeof(epoch_time_int)> epoch_time_bytes;
            for (size_t i = 0; i < sizeof(epoch_time_int); ++i) {
                epoch_time_bytes[i] = (epoch_time_int >> (8 * i)) & 0xFF;
            }
            // Convert the byte array into a vector
            std::vector<uint8_t> epoch_time_vector(epoch_time_bytes.begin(), epoch_time_bytes.end());
            return epoch_time_vector;
      - lambda: |-
          id(g_${generic_data_id_prefix}_time_synced) = true;

  - id: script_write_cbor_config
    then:
      - lambda: |-
          id(wait_for_ble).execute("script_write_cbor_config");  // Wait until ble_in_use is false
      - lambda: |-
          std::string x = id(g_${generic_data_id_prefix}_cbor_config);
          logd_x("${device_name}_generic_data script_write_cbor_config", x);
          if (x.empty()) {
            ESP_LOGW("${device_name}_generic_data", "script_write_cbor_config - Empty CBOR config, aborting write");
            return;
          }
          if (!check_crc(x, x.size())) {
            ESP_LOGD("${device_name}_generic_data", "script_write_cbor_config - Checksum CRC16 Failed");
            return;
          }
      - ble_client.ble_write:
          id: ${device_name}_ble_client_id
          service_uuid: ${ble_uuid_receive_service}
          characteristic_uuid: ${ble_uuid_generic_data}
          value: !lambda |-
            std::string x = id(g_${generic_data_id_prefix}_cbor_config);
            std::vector<uint8_t> config_data(x.begin(), x.end());
            return config_data;

  - id: script_write_config
    then:
      - lambda: |-
          std::string x = id(g_${generic_data_id_prefix}_config);
          logd_x("${device_name}_generic_data script_write_config|start value", x);
          if (x.empty()) { return; }
          if (!check_crc(x, x.size())) {
            ESP_LOGD("${device_name}_generic_data", "script_write_config - Checksum CRC16 Failed");
            return;
          }
          int rounded_i_max = static_cast<int>(id(g_${generic_data_id_prefix}_i_max));  // Round down to nearest integer
          int rounded_i_evse_max = static_cast<int>(id(g_${generic_data_id_prefix}_i_evse_max));  // Round down to nearest integer
          int rounded_i_min = static_cast<int>(id(g_${generic_data_id_prefix}_i_min));  // Round down to nearest integer
          x[0] = rounded_i_max;
          x[1] = rounded_i_evse_max;
          x[2] = id(g_${generic_data_id_prefix}_charge_mode);
          x[3] = rounded_i_min;
          add_crc_to_data(x, x.size());
          logd_x("${device_name}_generic_data script_write_config|Recalculated config before writing to BLE", x);
          id(g_${generic_data_id_prefix}_config) = x;
      - ble_client.ble_write:
          id: ${device_name}_ble_client_id
          service_uuid: ${ble_uuid_receive_service}
          characteristic_uuid: ${ble_uuid_generic_data}
          value: !lambda |-
            std::string x = id(g_${generic_data_id_prefix}_config);
            std::vector<uint8_t> config_data(x.begin(), x.end());
            return config_data;

  - id: script_read_generic_data
    mode: queued
    then:
      - lambda: |-
          std::string x = id(${device_name}_generic_data).state;
          logd_x("${device_name}_generic_data", x);
          if (x.empty()) { return; }
          ESP_LOGD("${device_name}_generic_data", "Status is: 0x%x", id(g_${generic_data_id_prefix}_status));
          switch(id(g_${generic_data_id_prefix}_status)) {
            case 0x4003:
              break;
            case 0x5003:
            case 0x5006:
              if (!check_crc(x, x.size())) {
                ESP_LOGD("${device_name}_generic_data", "Checksum CRC16 Failed");
                return;
              }
              break;
            default:
              ESP_LOGD("${device_name}_generic_data", "Status not recognized: 0x%x", id(g_${generic_data_id_prefix}_status));
              break;
          }
          if (id(g_${generic_data_id_prefix}_status) == 0x4003) {
            // Get the epoch time integer from ESP32
            std::time_t current_time_epoch = std::time(nullptr);
            int current_time_epoch_int_esp32 = static_cast<int>(current_time_epoch);
            // Get the epoch time integer from the BLE
            int epoch_time_int = getInt(x, 0);
            // Convert epoch time to a human-readable format
            std::time_t current_time_epoch_nexxtender = static_cast<std::time_t>(epoch_time_int);
            char current_time_human_readable[20]; // Adjust size as needed
            strftime(current_time_human_readable, sizeof(current_time_human_readable), "%Y-%m-%d %H:%M:%S", localtime(&current_time_epoch_nexxtender));

            // Assign the formatted time string to the global std::string
            id(g_${generic_data_id_prefix}_time) = std::string(current_time_human_readable);
            id(${generic_data_id_prefix}_human_time).update();

            // Log both epoch time and human-readable time
            ESP_LOGD("${device_name}_generic_data - time", "Nexxtender Epoch Time: %d, Human Readable Time: %s", epoch_time_int, current_time_human_readable);
            strftime(current_time_human_readable, sizeof(current_time_human_readable), "%Y-%m-%d %H:%M:%S", localtime(&current_time_epoch));
            ESP_LOGD("${device_name}_generic_data - time", "     ESP32 Epoch Time: %d, Human Readable Time: %s", current_time_epoch_int_esp32, current_time_human_readable);
            return;
          }
          if (id(g_${generic_data_id_prefix}_status) == 0x5006) {

            id(g_${generic_data_id_prefix}_cbor_config) = x;
            logd_x("${device_name}_generic_data script_read_generic_data - set global cbor_config", x);

            id(script_read_cbor_config).execute();
            // Read old config to populate variable

            id(script_read_config_old).execute();
            return;
          }

          if (id(g_${generic_data_id_prefix}_status) == 0x5003) {
            if (x.size() == 15) {
              // Store x in the global config variable
              id(g_${generic_data_id_prefix}_config) = x;
              String value_string;
              int value;
              id(${generic_data_id_prefix}_i_max).publish_state(getInt8(x, 0));
              id(g_${generic_data_id_prefix}_i_max) = getInt8(x, 0);
              id(max_available_capacity).publish_state(getInt8(x, 0));
              id(${generic_data_id_prefix}_i_evse_max).publish_state(getInt8(x, 1));
              id(g_${generic_data_id_prefix}_i_evse_max) = getInt8(x, 1);
              id(max_charging_speed).publish_state(getInt8(x, 1));
              value = getInt8(x, 2);
              switch (value) {
                  case 0:
                      value_string = "Eco Private";
                      break;
                  case 1:
                      value_string = "Max Private";
                      break;
                  case 4:
                      value_string = "Eco Open";
                      break;
                  case 5:
                      value_string = "Max Open";
                      break;
                  default:
                      value_string = "unknown";
              }
              auto select_call = id(select_mode).make_call();
              select_call.set_option(value_string.c_str());
              select_call.perform();
              id(${generic_data_id_prefix}_charge_mode).publish_state(value_string.c_str());
              id(${generic_data_id_prefix}_i_min).publish_state(getInt8(x, 3));
              id(g_${generic_data_id_prefix}_i_min) = getInt8(x, 3);
              value = (3 & getInt8(x, 4)) >> 1;
              switch (value) {
                  case 0:
                      value_string = "Mono/Tri+N";
                      break;
                  case 3:
                      value_string = "Tri";
                      break;
                  default:
                      value_string = "unknown";
              }
              id(${generic_data_id_prefix}_connection_type).publish_state(value_string.c_str());
              id(g_${generic_data_id_prefix}_week_start) = getTimeString(getShort(x, 5));
              id(g_${generic_data_id_prefix}_week_end) = getTimeString(getShort(x, 7));
              id(g_${generic_data_id_prefix}_weekend_start) = getTimeString(getShort(x, 9));
              id(g_${generic_data_id_prefix}_weekend_end) = getTimeString(getShort(x, 11));
              id(${generic_data_id_prefix}_week_schema).update();
              id(${generic_data_id_prefix}_weekend_schema).update();
            } else {
              ESP_LOGW("${device_name}_generic_data", "Config data size not equal to 15. Please open an issue with your HEX string information.");
            }
            return;
          }

  - id: script_read_cbor_config
    mode: queued
    then:
      - lambda: |-
          std::string x = id(g_${generic_data_id_prefix}_cbor_config);
          logd_x("${device_name}_generic_data CBOR Config", x);
          if (x.empty()) { return; }
          if (!check_crc(x, x.size())) {
            ESP_LOGD("${device_name}_generic_data", "Checksum CRC16 Failed");
            return;
          }

          //Flag the config read as true
          size_t index = 0;
          bool found_b2 = false;

          // Declare variables outside the switch-case block
          String value_string;
          // Select_call
          auto select_call = id(select_mode).make_call();
          while (index < x.size() - 1) {
            if (x[index] == 0xB2) {
                found_b2 = true;
                index++; // Move to the next byte after B2

                // Process the B2 map x
                while (index < x.size() - 2) {
                  uint8_t key = x[index++];
                  uint8_t initial_byte = x[index++];
                  uint8_t major_type = initial_byte >> 5;
                  uint8_t additional_info = initial_byte & 0x1F;
                  uint64_t value = 0;

                  if (additional_info < 24) {
                    value = initial_byte;
                  } else if (additional_info == 24) {
                    value = x[index];
                    index += 1;
                  } else if (additional_info == 25) {
                    value = (x[index] << 8) | x[index+1];
                    index += 2;
                  }
                  ESP_LOGD("${device_name}_generic_data", "B2 Map Item %d(%d): %lld [%d]", key, additional_info, value, major_type);

                  switch (key) {
                    case 1: // Charge Mode
                        switch (value) {
                            case 0:
                                value_string = "Eco Private";
                                break;
                            case 1:
                                value_string = "Max Private";
                                break;
                            case 4:
                                value_string = "Eco Open";
                                break;
                            case 5:
                                value_string = "Max Open";
                                break;
                            default:
                                value_string = "unknown";
                        }
                        id(${generic_data_id_prefix}_charge_mode).publish_state(value_string.c_str());
                        select_call.set_option(value_string.c_str());
                        select_call.perform();
                        break;
                    case 2: //modbusSlaveAddress(2)
                        break;
                    case 3: //cycleRate(3)
                        break;
                    case 4: //iMax(4), 16 (max beschikbare capaciteit)
                        id(${generic_data_id_prefix}_i_max).publish_state(value);
                        break;
                    case 5: //iEvseMax(5), 16 (maximale laadsnelheid auto)
                        id(${generic_data_id_prefix}_i_evse_max).publish_state(value);
                        id(max_charging_speed).publish_state(value);
                        break;
                    case 6: //iEvseMin(6), 6 (minimale laadsnelheid auto)
                        id(${generic_data_id_prefix}_i_evse_min).publish_state(value);
                        break;
                    case 7: //iLevel1(7), 6 (offloading minimum?)
                        id(${generic_data_id_prefix}_i_min).publish_state(value);
                        id(offloading_minimum).publish_state(value);
                        break;
                    case 8: //solarMode(8), 0
                        break;
                    case 9: //phaseSeq(9), 0
                        switch (value) {
                            case 0:
                                value_string = "Mono/Tri+N";
                                break;
                            case 3:
                                value_string = "Tri";
                                break;
                            default:
                                value_string = "unknown";
                        }
                        id(${generic_data_id_prefix}_connection_type).publish_state(value_string.c_str());
                        break;
                    case 10: //chargingPhases(10), 3
                        id(${generic_data_id_prefix}_charging_phases).publish_state(value);
                        break;
                    case 11: //blePin(11),
                        break;
                    case 12: //touWeekStart(12)
                        id(g_${generic_data_id_prefix}_week_start) = getTimeString(value);
                        ESP_LOGI("_week_start", "Total minutes: %llu", value);
                        break;
                    case 13: //touWeekStop(13)
                        id(g_${generic_data_id_prefix}_week_end) = getTimeString(value);
                        ESP_LOGI("_week_end", "Total minutes: %llu", value);
                        break;
                    case 14: //touWeekendStart(14), 0
                        id(g_${generic_data_id_prefix}_weekend_start) = getTimeString(value);
                        ESP_LOGI("_weekend_start", "Total minutes: %llu", value);
                        break;
                    case 15: //touWeekendStop(15), 0
                        id(g_${generic_data_id_prefix}_weekend_end) = getTimeString(value);
                        ESP_LOGI("_weekend_end", "Total minutes: %llu", value);
                        break;
                    case 16: //timezone(16), 0
                        break;
                    case 17: //relayOffPeriod(17), 5
                        break;
                    case 18: //externalRegulation(18), 0
                        break;
                    case 19: //iCapacity(19); 16/15
                        id(${generic_data_id_prefix}_i_capacity).publish_state(value);
                        if (id(g_${generic_data_id_prefix}_peak_consumption_limit) < 1) {
                          id(g_${generic_data_id_prefix}_peak_consumption_limit) = value;
                        }
                        if (id(g_${generic_data_id_prefix}_peak_consumption_limit_set) == true && id(g_${generic_data_id_prefix}_peak_consumption_limit) > 0 && id(g_${generic_data_id_prefix}_peak_consumption_limit) <= 40 && id(${generic_data_id_prefix}_i_capacity).state != id(g_${generic_data_id_prefix}_peak_consumption_limit)) {
                          ESP_LOGD("${device_name}_generic_data", "Peak consumption limit to be set, not updating slider yet");
                        } else {
                          id(peak_consumption_limit).publish_state(value);
                        }
                    default:
                        break;
                  }
              }
              break; // Exit the loop once B2 map is found
            } else {
                index++; // Move to the next byte
            }
          }

          if (!found_b2) {
              ESP_LOGW("${device_name}_generic_data", "B2 map not found in the CBOR data.");
          }

          ESP_LOGD("${device_name}_generic_data", "Checking i_capacity");
          if (id(g_${generic_data_id_prefix}_peak_consumption_limit_set) == true && id(g_${generic_data_id_prefix}_peak_consumption_limit) > 0 && id(g_${generic_data_id_prefix}_peak_consumption_limit) <= 40 && id(${generic_data_id_prefix}_i_capacity).state != id(g_${generic_data_id_prefix}_peak_consumption_limit)) {
            // i_capacity update
            index = 0;
            while (index < x.size() - 1) {
              if (x[index] == 0xB2) {
                found_b2 = true;
                index++;  // Move past B2 marker

                // Parse the CBOR map to find key 19

                while (index < x.size()) {
                    uint8_t key = x[index];  // Read key (don't increment yet)

                    if (key == 19) {  // Found key 19 (i_capacity)
                        index++;  // Move to value descriptor
                        uint8_t initial_byte = x[index++];
                        uint8_t major_type = initial_byte >> 5;
                        uint8_t additional_info = initial_byte & 0x1F;
                        uint64_t value = 0;
                        size_t value_index = index;  // Store position of actual value

                        // Read the current value
                        if (additional_info < 24) {
                            value = initial_byte;  // Single-byte integer (stored inline)
                        } else if (additional_info == 24) {
                            value = x[index];  // One extra byte
                            index += 1;
                        } else if (additional_info == 25) {
                            value = (x[index] << 8) | x[index + 1];  // Two extra bytes
                            index += 2;
                        }

                        ESP_LOGI("${device_name}_generic_data", "Current peak consumption limit: %lluA", value);
                        int new_value = static_cast<int>(id(g_${generic_data_id_prefix}_peak_consumption_limit));

                        if (new_value < 24) {
                            // New value fits in a single byte (0–23)
                            if (additional_info == 24) {
                                // Previously stored as two bytes (0x18 xx), remove extra byte
                                x.erase(x.begin() + value_index - 1);  // Remove extra byte
                                index -= 1;  // Adjust index after removing
                            }
                            x[value_index - 1] = static_cast<uint8_t>(new_value);  // Store as single byte
                        }
                        else {
                            // New value needs two bytes (24–255)
                            if (additional_info < 24) {
                                // Previously stored as single byte, insert an extra byte
                                x.insert(x.begin() + value_index, 0x00);
                                index += 1;  // Adjust index after inserting
                            }
                            x[value_index - 1] = 0x18;  // Mark as "extra byte follows"
                            x[value_index] = static_cast<uint8_t>(new_value);  // Store new value
                        }

                        add_crc_to_data(x, x.size());  // Update CRC
                        logd_x("${device_name}_generic_data with new peak consumption limit", x);
                        ESP_LOGI("${device_name}_generic_data", "New peak consumption limit: %lluA", new_value);
                        id(g_${generic_data_id_prefix}_cbor_config) = x;
                        id(g_${generic_data_id_prefix}_cbor_config_changed) = true;

                        return;  // Exit after modification
                    } else {
                        // Move to the next key-value pair
                        index++;  // Move past key
                        uint8_t initial_byte = x[index++];
                        uint8_t additional_info = initial_byte & 0x1F;

                        // Skip value bytes based on CBOR encoding
                        if (additional_info == 24) {
                            index += 1;
                        } else if (additional_info == 25) {
                            index += 2;
                        }
                    }
                }
                break;
              } else {
                  index++; // Move to the next byte
              }
            }
          } else {
            ESP_LOGI("${device_name}_generic_data", "No peak consumption limit to be adjusted: %f (RO value: %f)", id(g_${generic_data_id_prefix}_peak_consumption_limit), id(${generic_data_id_prefix}_i_capacity).state);
          }
          return;

button:
  - platform: template
    name: Toggle charger mode
    icon: mdi:home-switch-outline
    on_press:
      then:
        - lambda: |-
            id(switch_charger_mode).execute();
  - platform: template
    name: "Start Charge Default"
    icon: mdi:alpha-d-circle-outline
    on_press:
      - ble_client.ble_write:
          id: ${device_name}_ble_client_id
          service_uuid: ${ble_uuid_receive_service}
          characteristic_uuid: ${ble_uuid_generic_command}
          value: [0x01, 0x00]
  - platform: template
    name: "Start Charge Max"
    icon: mdi:alpha-m-circle-outline
    on_press:
      - ble_client.ble_write:
          id: ${device_name}_ble_client_id
          service_uuid: ${ble_uuid_receive_service}
          characteristic_uuid: ${ble_uuid_generic_command}
          value: [0x02, 0x00]
  - platform: template
    name: "Start Charge Auto"
    icon: mdi:alpha-a-circle-outline
    on_press:
      - ble_client.ble_write:
          id: ${device_name}_ble_client_id
          service_uuid: ${ble_uuid_receive_service}
          characteristic_uuid: ${ble_uuid_generic_command}
          value: [0x03, 0x00]
  - platform: template
    name: "Start Charge Eco"
    icon: mdi:alpha-e-circle-outline
    on_press:
      - ble_client.ble_write:
          id: ${device_name}_ble_client_id
          service_uuid: ${ble_uuid_receive_service}
          characteristic_uuid: ${ble_uuid_generic_command}
          value: [0x04, 0x00]
  - platform: template
    name: "Stop Charging"
    icon: mdi:stop-circle-outline
    on_press:
      - ble_client.ble_write:
          id: ${device_name}_ble_client_id
          service_uuid: ${ble_uuid_receive_service}
          characteristic_uuid: ${ble_uuid_generic_command}
          value: [0x06, 0x00]
  - platform: template
    name: Read time
    icon: mdi:clock-time-eight-outline
    entity_category: diagnostic
    on_press:
      then:
        - lambda: |-
            id(script_read_time).execute();
  - platform: template
    name: Sync time
    icon: mdi:timer-refresh-outline
    entity_category: diagnostic
    on_press:
      then:
        - lambda: |-
            id(script_sync_time).execute();

number:
  - platform: template
    id: offloading_minimum
    name: Offloading minimum
    icon: "mdi:current-ac"
    unit_of_measurement: A
    restore_value: true
    optimistic: true
    device_class: current
    step: 1
    max_value: ${slider_max_offloading_minimum}
    min_value: ${slider_min_offloading_minimum}
    mode: slider
    entity_category: "config"
    set_action:
      - lambda: |-
          std::string config = id(g_${generic_data_id_prefix}_config);
          if (config.empty()) { return; }
          float value = static_cast<float>(x);
          ESP_LOGD("${device_name}_generic_data", "Offloading minimum - Received: %f, previous value: %f", value, id(g_${generic_data_id_prefix}_i_min));
          if (id(g_${generic_data_id_prefix}_i_min) == 0) {
            ESP_LOGD("${device_name}_generic_data", "Setting Offloading minimum %f A", value);
            id(g_${generic_data_id_prefix}_i_min) = value;
          } else if (id(g_${generic_data_id_prefix}_i_min) != value) {
            ESP_LOGD("${device_name}_generic_data", "Setting Offloading minimum and sending config - Received: %f, previous value: %f", value, id(g_${generic_data_id_prefix}_i_min));
            id(g_${generic_data_id_prefix}_i_min) = value;
            id(script_send_config_old).execute();
          }
  - platform: template
    id: max_charging_speed
    name: Maximum car charging speed
    icon: "mdi:current-ac"
    unit_of_measurement: A
    restore_value: true
    optimistic: true
    device_class: current
    step: 1
    max_value: ${slider_max_car_charging_speed}
    min_value: ${min_charging_value}
    mode: slider
    entity_category: "config"
    set_action:
      - lambda: |-
          std::string config = id(g_${generic_data_id_prefix}_config);
          if (config.empty()) { return; }
          float value = static_cast<float>(x);
          ESP_LOGD("${device_name}_generic_data", "Maximum car charging speed - Received: %f, previous value: %f", value, id(g_${generic_data_id_prefix}_i_evse_max));
          if (id(g_${generic_data_id_prefix}_i_evse_max) == 0) {
            ESP_LOGD("${device_name}_generic_data", "Setting Maximum car charging speed %f A", value);
            id(g_${generic_data_id_prefix}_i_evse_max) = value;
          } else if (id(g_${generic_data_id_prefix}_i_evse_max) != value) {
            ESP_LOGD("${device_name}_generic_data", "Setting Maximum car charging speed and sending config - Received: %f, previous value: %f", value, id(g_${generic_data_id_prefix}_i_evse_max));
            id(g_${generic_data_id_prefix}_i_evse_max) = value;
            id(script_send_config_old).execute();
          }
  - platform: template
    id: max_available_capacity
    name: Maximum available capacity
    icon: "mdi:current-ac"
    unit_of_measurement: A
    restore_value: true
    optimistic: true
    device_class: current
    step: 1
    max_value: ${slider_max_available_capacity}
    min_value: ${min_charging_value}
    mode: slider
    entity_category: "config"
    set_action:
      - lambda: |-
          std::string config = id(g_${generic_data_id_prefix}_config);
          if (config.empty()) { return; }
          float value = static_cast<float>(x);
          ESP_LOGD("Maximum available capacity", "Received: %f, previous value: %f", value, id(g_${generic_data_id_prefix}_i_max));
          if (id(g_${generic_data_id_prefix}_i_max) == 0) {
            ESP_LOGD("Setting Maximum available capacity", "%f A", value);
            id(g_${generic_data_id_prefix}_i_max) = value;
          } else if (id(g_${generic_data_id_prefix}_i_max) != value) {
            ESP_LOGD("Setting Maximum available capacity and sending config", "Received: %f, previous value: %f", value, id(g_${generic_data_id_prefix}_i_max));
            id(g_${generic_data_id_prefix}_i_max) = value;
            id(script_send_config_old).execute();
          }

  - platform: template
    id: peak_consumption_limit
    name: Peak consumption limit
    icon: "mdi:current-ac"
    unit_of_measurement: A
    restore_value: true
    optimistic: true
    device_class: current
    step: 1
    max_value: ${slider_max_peak_consumption_limit}
    min_value: ${min_charging_value}
    mode: slider
    entity_category: "config"
    set_action:
      - lambda: |-
          std::string config = id(g_${generic_data_id_prefix}_config);
          if (config.empty()) { return; }
          float value = static_cast<float>(x);
          ESP_LOGI("${device_name}_generic_data", "Peak consumption limit - Received: %f, previous value: %f", value, id(g_${generic_data_id_prefix}_peak_consumption_limit));
          if (id(g_${generic_data_id_prefix}_peak_consumption_limit) == 0) {
            ESP_LOGD("${device_name}_generic_data", "Setting Peak consumption limit %f A", value);
            id(g_${generic_data_id_prefix}_peak_consumption_limit) = value;
          } else if (id(g_${generic_data_id_prefix}_peak_consumption_limit) != value) {
            ESP_LOGD("${device_name}_generic_data", "Setting Peak consumption limit and sending config - Received: %f, previous value: %f", value, id(g_${generic_data_id_prefix}_peak_consumption_limit));
            id(g_${generic_data_id_prefix}_peak_consumption_limit) = value;
            id(g_${generic_data_id_prefix}_peak_consumption_limit_set) = true;
            id(script_read_config).execute();
          }

select:
  - platform: template
    id: select_mode
    name: "Mode"
    icon: "mdi:speedometer"
    restore_value: true
    optimistic: true
    options:
      - Eco Private
      - Max Private
      - Eco Open
      - Max Open
    entity_category: "config"
    on_value:
      - lambda: |-
          std::string config = id(g_${generic_data_id_prefix}_config);
          if (config.empty()) { return; }
          int value_int = 6;
          switch (i) {
              case 0: //"Eco Private"
                  value_int = 0;
                  break;
              case 1: //"Max Private"
                  value_int = 1;
                  break;
              case 2: //"Eco Open"
                  value_int = 4;
                  break;
              case 3: //"Max Open"
                  value_int = 5;
                  break;
              default:
                  break;
          }
          ESP_LOGD("${device_name}_generic_data", "Car charge mode - Received %s (%d), previous: %d", x.c_str(), value_int, id(g_${generic_data_id_prefix}_charge_mode));
          if (id(g_${generic_data_id_prefix}_charge_mode) == 6) {
            ESP_LOGD("${device_name}_generic_data", "Setting global car charge mode - %s (%d)", x.c_str(), i);
            id(g_${generic_data_id_prefix}_charge_mode) = value_int;
          } else if (value_int != 6 && id(g_${generic_data_id_prefix}_charge_mode) != value_int) {
            ESP_LOGD("${device_name}_generic_data", "Setting car charge mode and sending config - Received %s (%d), previous: %d", x.c_str(), i, id(g_${generic_data_id_prefix}_charge_mode));
            id(g_${generic_data_id_prefix}_charge_mode) = value_int;
            id(script_send_config_old).execute();
          }

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO00
      inverted: true
      mode:
        input: true
        pullup: true
    name: Toggle charger mode
    internal: true
    on_release:
      then:
        - lambda: |-
            ESP_LOGD("Boot switch", "Released");
            id(switch_charger_mode).execute();

# Services in API
api:
  services:
    - service: set_week_schema_start
      variables:
        time_string: string
      then:
        - lambda: |-
            int total_minutes = convert_time_string_to_minutes(time_string);
            if (total_minutes < 0) {
              // An error occurred
              return;
            }
            ESP_LOGI("set_week_schema_start", "Total minutes: %d", total_minutes);
